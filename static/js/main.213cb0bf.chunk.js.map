{"version":3,"sources":["components/navbar.jsx","components/Posts.jsx","actions/postActions.jsx","actions/types.jsx","components/Postform.jsx","reducers/postReducer.jsx","reducers/index.jsx","store.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Navbar","react_default","a","createElement","className","Component","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","key","id","title","body","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPost","style","width","height","postData","console","log","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","components_navbar","Postform","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.213cb0bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './navbar.css';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className='navbar'>\r\n                <h1>Redux</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions'\r\n\r\nclass Posts extends Component {\r\n    componentWillMount(){\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.newPost){\r\n            this.props.posts.unshift(nextProps.newPost);\r\n        }\r\n    }\r\n      \r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <p>{post.body}</p>\r\n            </div>\r\n           ));\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                {postItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts} )(Posts);","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    \r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(posts => \r\n            dispatch({\r\n            type: FETCH_POSTS,\r\n            payload: posts\r\n        })\r\n    );\r\n  \r\n}\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n    console.log('action called');\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n    .then(res => res.json())\r\n    .then(post => \r\n        dispatch({\r\n            type: NEW_POST,\r\n            payload: post\r\n    }));\r\n\r\n}","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         title: '',\r\n         body: ''\r\n      }\r\n\r\n      this.onChange = this.onChange.bind(this);\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({ [e.target.name]: e.target.value  })\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        };\r\n\r\n       // Call Action\r\n       this.props.createPost(post);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add Posts</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label>Title: </label><br />\r\n                        <input type='text' style={{width:'50%'}} name='title' value={this.state.title} onChange={this.onChange}/>\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <label>Body: </label><br />\r\n                        <textarea name='body' style={{width:'50%', height: '100px'}}  value={this.state.body} onChange={this.onChange} />\r\n                    </div>\r\n                    <br />\r\n                    <button type='submit'>Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { createPost })(PostForm);","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch (action.type) {\r\n        case FETCH_POSTS: \r\n        return {\r\n            ...state,\r\n            items: action.payload\r\n        };\r\n        case NEW_POST:\r\n        return {\r\n            ...state,\r\n            item: action.payload\r\n        };\r\n        default:\r\n          return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore( rootReducer, \r\n    initialState, \r\n    compose( \r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ) \r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Navbar from './components/navbar';\nimport Posts from './components/Posts';\nimport Postform from './components/Postform';\n\nimport store from './store';\n\nclass App extends Component {\n\n \n render() {\n    return (\n      \n      <Provider store={store} >\n      <Navbar />\n       <div className=\"App\">\n       \n        <Postform />\n        <hr />\n        <Posts />\n          \n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}